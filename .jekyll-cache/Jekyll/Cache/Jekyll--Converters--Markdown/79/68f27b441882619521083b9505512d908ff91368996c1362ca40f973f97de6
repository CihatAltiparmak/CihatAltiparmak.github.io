I"™(<h1 id="another-page">Another Page</h1>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean euismod, arcu ut vestibulum luctus, dolor eros auctor arcu, sit amet porta magna dui a turpis. Proin eget porta magna. Pellentesque scelerisque nisi eget nulla mattis finibus. Maecenas nec rhoncus tellus, et euismod purus. Pellentesque volutpat ligula ac nisl elementum bibendum. Integer rutrum turpis id mi aliquet, varius feugiat purus vehicula. Etiam molestie sollicitudin faucibus. Aenean at lectus porttitor, eleifend purus ac, euismod ante. Mauris varius mi sit amet velit aliquet lacinia. Nunc eu tristique diam. Sed a felis ac ligula dictum aliquam at sed turpis.</p>

<p>Sed tristique vehicula dolor, id cursus eros iaculis non. Aenean sit amet tincidunt erat. Cras pellentesque pretium nisi nec eleifend. Mauris lobortis pretium sagittis. Curabitur id sem nisi. Etiam ut arcu ac ex ullamcorper mattis vitae a neque. Cras id tincidunt quam. Nulla elit ante, egestas eu urna a, sagittis sagittis nisl. Aliquam nec rhoncus justo. Maecenas eleifend ac ante sit amet feugiat.</p>

<h2 id="welcome-to-another-page">Welcome to another page</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cm">/*   
      A palindrome is a word, phrase, number, or other sequence of symbols or elements, 
  whose meaning may be interpreted the same way in either forward or reverse direction.
  This program will prompt the user to enter a word or a sentence and then confirms if 
  the user's entry is an palindrome or not.   
*/</span>
<span class="cp">#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
</span>
<span class="kt">bool</span> <span class="nf">isPalindrome</span><span class="p">(</span> <span class="kt">char</span> <span class="p">[]</span> <span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
<span class="p">{</span>
	<span class="kt">char</span> <span class="n">userString</span><span class="p">[</span><span class="mi">300</span><span class="p">];</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="err">\</span><span class="s">"Type a word or phrase to see if it's a Palindrome.</span><span class="se">\"</span><span class="s"> &lt;&lt; </span><span class="se">\"\n\n\"</span><span class="s">;</span><span class="err">
</span><span class="s">	std::cin.getline(userString, 300);		</span><span class="err">
</span><span class="s">	std::cout &lt;&lt; </span><span class="se">\"\n\"</span><span class="s">;</span><span class="err">
</span><span class="s">	if ( isPalindrome( userString ) )</span><span class="err">
</span><span class="s">			std::cout &lt;&lt; </span><span class="se">\"\\</span><span class="s">"</span><span class="err">\</span><span class="s">" &lt;&lt; userString &lt;&lt; </span><span class="se">\"\\</span><span class="s">"</span> <span class="n">is</span> <span class="n">a</span> <span class="n">Palindrome</span><span class="p">.</span><span class="err">\</span><span class="s">";</span><span class="err">
</span><span class="s">	else</span><span class="err">
</span><span class="s">			std::cout &lt;&lt; </span><span class="se">\"\\</span><span class="s">"</span><span class="err">\</span><span class="s">" &lt;&lt; userString &lt;&lt; </span><span class="se">\"\\</span><span class="s">"</span> <span class="n">is</span> <span class="n">not</span> <span class="n">a</span> <span class="n">Palindrome</span><span class="p">.</span><span class="err">\</span><span class="s">";	</span><span class="err">
</span><span class="s">	std::cout &lt;&lt; </span><span class="se">\"\n\n\"</span><span class="s">;</span><span class="err">
</span><span class="s">	system( </span><span class="se">\"</span><span class="s">PAUSE</span><span class="se">\"</span><span class="s"> );		</span><span class="err">
</span><span class="s">	return 0;</span><span class="err">
</span><span class="s">}</span><span class="err">
</span><span class="s">/*</span><span class="err">
</span><span class="s">  The following function will return true if the array parameter is a palindrome.</span><span class="err">
</span><span class="s">  </span><span class="err">
</span><span class="s">  Step 1: First it counts how many characters are in the parameter array and then creates a new </span><span class="err">
</span><span class="s">	      array (array1) with that count size.</span><span class="err">

</span><span class="s">  Step 2: The contents of the parameter array are copied to array1 with no spaces or punctuations.</span><span class="err">
</span><span class="s">          - This is accomplished by checking the user's array for anything other than an </span><span class="err">
</span><span class="s">		    alphetbet character. When an non-alpha character is found, that array element </span><span class="err">
</span><span class="s">			postion is recorded. It then copies the user's array contents from the starting </span><span class="err">
</span><span class="s">			element position to the position right before the non-alpha character to the new</span><span class="err">
</span><span class="s">			array (array1). The element position right after the non-alpha character then </span><span class="err">
</span><span class="s">			becomes the new starting position and the process iterates until array1 has only </span><span class="err">
</span><span class="s">			one element position left in which a null terminator will be assigned.</span><span class="err">

</span><span class="s">  Step 3: array1 is then tested to see if it's a palindrome. Instead of copying array1 into an </span><span class="err">
</span><span class="s">		  another array in reverse order and then comparing the two, the test can be </span><span class="err">
</span><span class="s">		  accomplished by comparing array1 within itself. </span><span class="err">
</span><span class="s">		  - This is accomplished by comparing array1's first character with it's last character. </span><span class="err">
</span><span class="s">		    if both those charcters are the same, whether uppercase or lowercase, it then compares </span><span class="err">
</span><span class="s">			array1's second character with it'a second-to-last character....and so forth until the </span><span class="err">
</span><span class="s">			middle of array1 is reached. If at anytime, however, a comparison is not the same then </span><span class="err">
</span><span class="s">			the 'isPalindrome' flag is set to false and the loop ends. The 'isPalindrome' flag will </span><span class="err">
</span><span class="s">			remain true if and only if all comparisons are the same.</span><span class="err">
</span><span class="s">			</span><span class="err">
</span><span class="s">  Step 4: The function then returns the boolean value of isPalindrome.</span><span class="err">
</span><span class="s">*/</span><span class="err">
</span><span class="s">bool isPalindrome( char array[] )</span><span class="err">
</span><span class="s">{</span><span class="err">
</span><span class="s">    bool isPalindrome = true;</span><span class="err">
</span><span class="s">    int size = 0, index = 0, startingPos = 0, count1 = 0;	</span><span class="err">
</span><span class="s">	// Step 1</span><span class="err">
</span><span class="s">	while ( array[size] != '</span><span class="se">\0</span><span class="s">' ) </span><span class="err">
</span><span class="s">	{                              </span><span class="err">
</span><span class="s">			size++;</span><span class="err">
</span><span class="s">	}	</span><span class="err">
</span><span class="s">	char array1[size + 1];</span><span class="err">
</span><span class="s">	// Step 2</span><span class="err">
</span><span class="s">	while ( index &lt; size ) </span><span class="err">
</span><span class="s">	{                     </span><span class="err">
</span><span class="s">			while ( (array[index] &gt;= 'A' and array[index] &lt;= 'Z') or</span><span class="err">
</span><span class="s">                    (array[index] &gt;= 'a' and array[index] &lt;= 'z')    )</span><span class="err">
</span><span class="s">					index++;</span><span class="err">
</span><span class="s">			for ( int count = startingPos; count &lt; index; count++ )</span><span class="err">
</span><span class="s">			{</span><span class="err">
</span><span class="s">					array1[count1] = array[count];</span><span class="err">
</span><span class="s">					count1++;</span><span class="err">
</span><span class="s">			}</span><span class="err">
</span><span class="s">			index++;</span><span class="err">
</span><span class="s">			startingPos = index;</span><span class="err">
</span><span class="s">	}</span><span class="err">
</span><span class="s">	array1[count1] = '</span><span class="se">\0</span><span class="s">';	</span><span class="err">
</span><span class="s">	//Step 3</span><span class="err">
</span><span class="s">	index = 0;</span><span class="err">
</span><span class="s">	while ( index &lt;= (count1 - 1)/2 and isPalindrome )</span><span class="err">
</span><span class="s">	{</span><span class="err">
</span><span class="s">			if ( array1[index] != array1[count1 - index - 1]      and</span><span class="err">
</span><span class="s">				 array1[index] != array1[count1 - index - 1] - 32 and</span><span class="err">
</span><span class="s">				 array1[index] != array1[count1 - index - 1] + 32 and</span><span class="err">
</span><span class="s">				 array1[index] - 32 != array1[count1 - index - 1] and</span><span class="err">
</span><span class="s">				 array1[index] + 32 != array1[count1 - index - 1]     )</span><span class="err">
</span><span class="s">					isPalindrome = false;</span><span class="err">
</span><span class="s">			index++;</span><span class="err">
</span><span class="s">	}</span><span class="err">
</span><span class="s">	// Step 4</span><span class="err">
</span><span class="s">	return isPalindrome;</span><span class="err">
</span><span class="s">}</span><span class="err">
</span></code></pre></div></div>

<p><em>yay</em></p>

<p><a href="../">back</a></p>
:ET